name: Run Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs: 
  # set_environment:
  #   runs-on: ubuntu-latest 
  #   steps: 
  #     - name: Checkout code
  #       uses: actions/checkout@v2
        
  #     - name: Determine environment based on branch
  #       id: set_env
  #       run: |
  #         if [ "$GITHUB_REF" == "refs/heads/qa" ]; then
  #           echo "environment=QA" >> "$GITHUB_ENV"
  #         elif [[ "$GITHUB_REF" =~ ^refs/heads/release/.* ]]; then
  #           echo "environment=PROD" >> "$GITHUB_ENV"
  #         else 
  #           echo "environment=QA" >> "$GITHUB_ENV"
  #         fi         
  #   outputs:
  #     environment: ${{ env.environment }}
  # # SonarCloud:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: SonarQube Scan
  #       uses: SonarSource/sonarqube-scan-action@v5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: https://sonarcloud.io
  #       with:
  #         args: >
  #           -Dsonar.projectKey=sharnitha-sonarcloud1_vue3-app
  #           -Dsonar.organization=sharnitha-sonarcloud1
      
  #     - name: SonarQube Quality Gate check
  #       id: sonarqube-quality-gate-check
  #       uses: SonarSource/sonarqube-scan-action@v5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: https://sonarcloud.io
  #       with:
  #         args: >
  #           -Dsonar.projectKey=sharnitha-sonarcloud1_vue3-app
  #           -Dsonar.organization=sharnitha-sonarcloud1
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      # - name: "Example show SonarQube Quality Gate Status value"
      #   run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
            
  build_Push-acr:
    runs-on: ubuntu-latest
    # needs: set_environment
    # environment: ${{ needs.set_environment.outputs.environment }}
    # env:
    #   Environments: ${{ needs.set_environment.outputs.environment }}
    #   workspace: ${{ github.workspace }}
    steps: 
    #   - uses: trstringer/manual-approval@v1
    #     timeout-minutes: 5
    #     with:
    #       secret: ${{ secrets.PAT }}
    #       approvers: Sharnitha
    #       minimum-approvals: 1
    #       issue-title: "Deploying to qa env"
    #       issue-body: "Please approve qa deny."
    #       exclude-workflow-initiator-as-approver: false
    #       additional-approved-words: ''
    #       additional-denied-words: ''
        - name: Checkout code
          uses: actions/checkout@v2 
          
        - name: Docker build-qa
          if: github.ref == 'refs/heads/main','refs/heads/feature/*'
          run: |
                echo "Running dev"
                docker build --target dev -t azurecontainerregistry1-f0esgpd4hreaf0c9.azurecr.io/frontend:${{ github.run_id }} .
                
        - name: Docker build-prod
          if: github.ref != 'refs/heads/main'
          run: |
                echo "Running prod"
                docker build --target prod -t azurecontainerregistry1-f0esgpd4hreaf0c9.azurecr.io/frontend:${{ github.run_id }} .
        # - name: Run Trivy scan
        #   uses: aquasecurity/trivy-action@master
        #   with:
        #     image-ref: "Sharnithadockerimagstore.azurecr.io/frontend:${{ github.run_id }}"
        #     format: "table"
        #     exit-code: 1
        #     ignore-unfixed: true
        #     severity: "CRITICAL,HIGH"
            
  #       - name: Docker build
  #         run: |
  #           docker login azurecontainerregistry1-f0esgpd4hreaf0c9.azurecr.io -u ${{secrets.APPID}} -p ${{secrets.SECRETID}}
  #           docker push azurecontainerregistry1-f0esgpd4hreaf0c9.azurecr.io/frontend:${{ github.run_id }} 
            
  # Deploy-to-ACA:
  
  #       runs-on: self-hosted
  #       needs: build_Push-acr
  #       steps:
  #         - name: azure login steps
  #           run:  |
  #              az login --service-principal -u ${{secrets.APPID}} -p ${{secrets.SECRETID}} --tenant ${{secrets.TENANTID}}
  #              az containerapp update  -n containerapptesting -g SharnithaRG --image azurecontainerregistry1-f0esgpd4hreaf0c9.azurecr.io/frontend:${{ github.run_id }}
            
          # - name: Build and deploy Container App 
          #   uses: azure/container-apps-deploy-action@v1
          #   with:
          #     acrName: azurecontainerregistry1 
          #     containerAppName: testcontainerapp
          #     resourceGroup: SharnithaRG
          #     imageToDeploy: azurecontainerregistry1-f0esgpd4hreaf0c9.azurecr.io/frontend:${{ github.run_id }}
                  
      # - name: Log in to Azure
      #   run : az login --service-principal -u ${{secrets.APPID}} -p ${{secrets.SECRETID}} --tenant ${{secrets.APPID}}
    #------    

            # - name: Run SonarCloud analysis for Vue using `sonar`
      #   run: |
      #     npm install -g sonar
      #     sonar \
      #       -Dsonar.host.url=https://sonarcloud.io \
      #       -Dsonar.token=ac35b1a790aa492f9bbe0a1adcd52ea77ff4adb4
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@v2
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=Vue3 app
      #       -Dsonar.organization=Sharnitha-sonarcloud1
      
      # - name: Docker build
      #   run: |
      #     docker login thisonetypeofstoragingdockerimage.azurecr.io -u thisonetypeofstoragingdockerimage -p ${{secrets.pat}}
      #     docker push thisonetypeofstoragingdockerimage.azurecr.io/frontend:${{ github.run_id }}  
     
